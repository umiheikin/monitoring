- hosts: localhost
  connection: local
  gather_facts: False
  vars:
    hostname: Monitoring-Server
    ec2_access_key: "{{ lookup('env', 'ansible_aws_access_key') }}"
    ec2_secret_key: "{{ lookup('env', 'ansible_aws_secret_key') }}"
    instance_type: "t2.micro"
    image: "ami-0badcc5b522737046"
    group: "SSH-HTTP-MONITORING"
    region: "eu-central-1"
  tasks:
    - name: Create EC2 instance and run user_data.sh
      ec2: image={{ image }}
           instance_type={{ instance_type }}
           aws_access_key={{ ec2_access_key }}
           aws_secret_key={{ ec2_secret_key }}
           key_name=yuriy-aws-frankfurt
           instance_tags='{ "Name":"{{ hostname }}" }'
           region={{ region }}
           exact_count=1
           count_tag='{ "Name":"{{ hostname }}" }'
           group={{ group }}
           user_data={{ lookup('file', 'user_data.sh') }}
           wait=true

    - name: Gathers facts (instance metadata) about Monitoring-Server
      ec2_instance_facts:
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"
        region: "{{ region }}"
        filters:
          "tag:Name": "{{ hostname }}"
          instance-state-name: running
      register: ec2_info

    -  set_fact:
         msg: "{{ ec2_info | json_query('instances[*].public_ip_address') }}"
    - debug: var=msg

    - name: Add new group to inventory
      lineinfile:
        path: hosts.txt
        state: present
        line: '[EC2]'
        insertafter: EOF

    - name: Add the newly created EC2 instance(s) to the local host group
      lineinfile:
        path=hosts.txt
        regexp={{ item.public_ip_address }}
        insertafter="[EC2]" line={{ item.public_ip_address }}
      with_items: '{{ ec2_info.instances }}'

    - meta: refresh_inventory

    - name: Waiting for SSH to come up
      local_action: wait_for
                    host={{ item.public_ip_address }}
                    port=22
                    state=started
      with_items: '{{ ec2_info.instances }}' 

    - name: Waiting for docker-compose
      local_action: wait_for
                    path: /usr/local/bin/docker-compose

- hosts: EC2
  gather_facts: False
  vars:
    project_path: "/home/ec2-user/deploy"
  tasks:
      - name: Create a directory
        file:
          path: "{{ project_path }}"
          state: directory

      - name: Copy zabbix-compose.yml to EC2 instance
        copy:
          src: zabbix-compose.yml
          dest: "{{ project_path }}"

      - name: Run zabbix-compose
        docker_compose:
          project_src: "{{ project_path }}"
          files: zabbix-compose.yml
        environment:
          MYSQL_USER: "{{ lookup('env', 'MYSQL_USER') }}"
          DB_SERVER_HOST: "{{ lookup('env', 'DB_SERVER_HOST') }}"
          ZBX_JAVAGATEWAY: "{{ lookup('env', 'ZBX_JAVAGATEWAY') }}"
          MYSQL_PASSWORD: "{{ lookup('env', 'MYSQL_PASSWORD') }}"
          MYSQL_ROOT_PASSWORD: "{{ lookup('env', 'MYSQL_ROOT_PASSWORD') }}"
